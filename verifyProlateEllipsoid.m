%% Compare the combined ansatz with the known solution for a prolate ellipsoid
% that is translating and axially rotating.
addpath(genpath('.'))

methodsToDo = {'rotletAnsatz','rotletAnsatzRTT','rotletAnsatzRTTI1Approx','combinedAnsatz','combinedAnsatzBCApprox','combinedAnsatzRTT','combinedAnsatzRTTBCApprox'};

%% Setup parameters.
params = struct();

% Slenderness parameter.
params.epsilon = 1e-2;

% Level of numerical discretisation (number of segments on which force and
% torque are treated as constant).
params.N = 400;

% Select a centreline xi:
params.xiSelector = 1;

% Select a shape function eta:
params.etaSelector = 1;

% Select a prescribed linear velocity:
params.linVelSelector = 2;

% Select a prescribed angular velocity:
params.angVelSelector = 1;

% Set the number of arclengths to sample when evaluating the velocity
% generated by the ansaetze.
params.numArclengthEvaluationPoints = 51;

% Set the number of points on a cross section to sample when evaluating the
% velocity generated by the ansaetze.
params.numCircumferentialEvaluationPoints = 12;

% Evaluate the SBT ansaetze.
output = evaluateSBT(params, methodsToDo);

% Evaluate the error in the velocity fields.
errors = struct();
for name = methodsToDo
    name = name{1};
    errors.(name) = evalVelErrors(name, output);
end

% Form the known solution as a function of arclength s in (-1,1).
e = output.e;
[linVel, linVelLab] = linVels(params.linVelSelector);
[angVel, angVelLab] = angVels(params.angVelSelector);
C = e^2 * diag([1/(-2*e + (1+e^2)*log((1+e)/(1-e))), 2/(2*e + (3*e^2-1)*log((1+e)/(1-e))), 2/(2*e + (3*e^2-1)*log((1+e)/(1-e)))]);
trueForce = cell2mat(arrayfun(@(s) C * linVel(s), output.discreteSegmentArclengthMidpoints, 'UniformOutput', false));
trueTorque = cell2mat(arrayfun(@(s) angVel(s) * e^2 / (2*e/(1-e^2)- log((1+e)/(1-e))) * (1-s.^2),output.discreteSegmentArclengthMidpoints, 'UniformOutput', false));

% Evaluate the error in the computed forces and torques.
for name = methodsToDo
    name = name{1};
    errors.(name) = evalForceTorqueErrors(name, output, trueTorque=trueTorque, trueForce=trueForce, structure=errors.(name));
end

save('output/verifyProlateEllipsoid/verifyProlateEllipsoid.mat','params','output','errors','trueForce','trueTorque')